/*
 *     Zerite Client | Open source Minecraft client modification
 *     Copyright (C) 2019  <Zerite Team>
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

buildscript {
    def f = file("gradle/mcversion.txt")
    project.ext.mcVersion = f.exists() ? f.readLines().first() as int : 10809

    repositories {
        mavenCentral()
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41'
    }
}

configurations {
    embed
    compile.extendsFrom(embed)
}

apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'java'
apply plugin: 'maven'

group 'net.zeriteclient'
version '0.3-PRE'

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spongepowered.org/maven' }
}

dependencies {
    embed 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    embed group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.3.0-M1'

    embed 'org.spongepowered:mixin:0.7.11-SNAPSHOT'
//    embed 'com.github.Sk1erLLC:AsmHelper:3a6b3cf467'
    embed 'com.github.FalseHonesty:reflections:21959e6e'
    embed ('org.slick2d:slick2d-core:1.0.2') {
        exclude module: 'lwjgl'
    }
    embed 'com.github.fcannizzaro:material-colors:0.1.0'
    embed fileTree(dir: 'lib', include: '*.jar')
}

minecraft {
    version = '1.8.9'
    mappings = 'stable_22'
    tweakClass = 'net.zeriteclient.zerite.injection.stages.tweaker.ZeriteTweaker'
    runDir = 'run'
    makeObfSourceJar = false
}

jar {
    dependsOn configurations.compile

    manifest.attributes(
            'TweakClass': 'net.zeriteclient.zerite.injection.stages.tweaker.ZeriteTweaker',
            'MixinConfigs': 'mixins.zerite.json',
            'Manifest-Version': 1.0,
            'TweakOrder': 0
    )

    from {
        configurations.embed.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    configurations.embed.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

mixin {
    defaultObfuscationEnv notch
    add sourceSets.main, 'refmap.mixins.zerite.json'
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from {project.tasks.genSrgs.mcpToSrg}
    into 'mappings'
}

compileJava.dependsOn copySrg

setupDecompWorkspace.dependsOn copySrg
setupDevWorkspace.dependsOn copySrg
setupCiWorkspace.dependsOn copySrg

apply from: 'preprocessor.gradle'

task changeMcVersion() {
    doLast {
        def version

        if (project.hasProperty("minecraftVersion")) {
            version = project.minecraftVersion
        } else {
            version = 10809
            println "Defaulting to version 1.8.9..."
        }

        project.ext.mcVersion = version
        def f = file("gradle/mcversion.txt")
        f.delete()
        f.createNewFile()
        f.write(version.toString())

        println "MC target version is $version"
        def vars = [MC: version as int]
        project.convertTree(vars, 'src/main/java')
        project.convertTree(vars, 'src/main/kotlin')
        project.convertTree(vars, 'src/main/resources')
    }
}